plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'com.github.ben-manes.caffeine:caffeine'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
	implementation 'com.github.vladimir-bukhtoyarov:bucket4j-redis:7.6.0'
	implementation 'redis.clients:jedis:4.4.3'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2'
	testImplementation 'it.ozimov:embedded-redis:0.7.3'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.00
			}
		}
	}
}

task printCoverage(dependsOn: jacocoTestReport) {
	doLast {
		def csvFile = file("${buildDir}/reports/jacoco/test/jacocoTestReport.csv")
		if (csvFile.exists()) {
			def lines = csvFile.readLines()
			if (lines.size() > 1) {
				def data = lines[1].split(',')
				def missed = data[3] as Double
				def covered = data[4] as Double
				def total = missed + covered
				def percentage = total > 0 ? (covered / total * 100).round(2) : 0
				println "Code Coverage: ${percentage}%"
			}
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
